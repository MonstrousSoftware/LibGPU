
Note we use the webgpu.h header file from the Learn Webgpu in C++ web site. It is not the latest header file.



Get glfw3.dll from here for Windows 64

https://www.glfw.org/download


Command line:
g++ -m64 main.cpp -I.\include -Wl,--kill-at wgpu_native.dll glfw3.dll

Note: use wgpu_native.dll not -Lwgpu_native on the command line


F:\Coding\IdeaProjects\CallingWebGPU\src\main\c>g++ -m64 main.cpp -I.\include -Wl,--kill-at wgpu_native.dll glfw3.dll
F:/Coding/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/14.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\Users\Marco\AppData\Local\Temp\ccpRpXPB.o:main.cpp:(.text+0x466): undefined reference to `glfwGetWGPUSurface'
F:/Coding/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/14.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\Users\Marco\AppData\Local\Temp\ccpRpXPB.o:main.cpp:(.text+0x4d0): undefined reference to `requestAdapterSync(WGPUInstanceImpl*, WGPURequestAdapterOptions const*)'
F:/Coding/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/14.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\Users\Marco\AppData\Local\Temp\ccpRpXPB.o:main.cpp:(.text+0x5ca): undefined reference to `requestDeviceSync(WGPUAdapterImpl*, WGPUDeviceDescriptor const*)'
collect2.exe: error: ld returned 1 exit status


F:\Coding\IdeaProjects\CallingWebGPU\src\main\c>g++ -m64 main.cpp webgpu-utils.cpp -I.\include -Wl,--kill-at wgpu_native.dll glfw3.dll
F:/Coding/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/14.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\Users\Marco\AppData\Local\Temp\cc0qfLb0.o:main.cpp:(.text+0x466): undefined reference to `glfwGetWGPUSurface'
collect2.exe: error: ld returned 1 exit status

Add glfw3webgpu.c and glfw3webgpu.h to the source directory (from https://eliemichel.github.io/LearnWebGPU/getting-started/hello-webgpu.html)

g++ -m64 main.cpp webgpu-utils.cpp glfw3webgpu.c -I.\include -Wl,--kill-at wgpu_native.dll glfw3.dll


Batch file compile_triangle.bat is to generate a triangle demo from C files linking to DLLs using Mingw.

This also works (no kill-at):
g++ triangle.cpp webgpu-utils.cpp glfw3webgpu.c -I.\include wgpu_native.dll glfw3.dll -o triangle.exe

Note the dll need to be found by the executable so we put them in the same directory at the executable.


Now to call from Java.
To make sure the Java programme can find the native.dll set the working directory to the once containing the DLLs:
In Intellij: Edit Configuration, set Working Directory to F:\Coding\IdeaProjects\CallingWebGPU\src\main\c

So we can call DLL functions from Java, but now we need to pass descriptor structs to the DLL.
A Java class will not have the same memory layout, we need to pass a pointer to memory that follows precisely the struct as defined in C.

One solution may be JNR-FFI (foreign function interface) which allows conversion between Java and C parameters and supports structs in memory.

Need to up my Gradle skills to link JNR-FFI with my Java code.



Side note:
The notation R"( .... )"; in the cpp code to define shader code is a so-called raw string
introduced in C++11.

You can check for C++11 support like this:

#if __cplusplus < 201103L
  #error This library needs at least a C++11 compliant compiler
#endif

> g++ --version
g++.exe (x86_64-win32-seh, Built by MinGW-W64 project) 4.8.2

Need to call with a flag like this:
g++ -std=c++11 triangle.cpp -I.\include

triangle.exe hangs on laptop.
It hangs in the call of wgpuCreateInstance().


To compile LeanrnWebGPU C code with MinGW:
> delete build directory
> cmake -G "MinGW Makefiles" . -B build
> cmake --build build

Errors:
  WGPURequestAdapterOptions adapterOpts = {};                                           ^
C:\Coding\C\LearnWebGPU-Code-step030-vanilla\main.cpp:106:43: error: missing initializer for member 'WGPURequestAdapterO


The mingw compiler is very old. Replaced it by downloading MSYS2 and adding
C:\Coding\msys64\ucrt64\bin to the PATH
> gcc --version
gcc (Rev3, Built by MSYS2 project) 14.1.0
Copyright (C) 2024 Free Software Foundation, Inc.

Download gcc using: pacman -S mingw-w64-ucrt-x86_64-gcc

Also download pacman -S mingw-w64-ucrt-x86_64-cmake


To do: make gradle script to compile the C source instead of calling compile.bat manually.

Can we impose some typing on the various Pointer variables (device, adapter, queue, etc.)

To do: add GLFW to create a window


To add LWJGL3 to your Java project you can just go to the customizer on https://www.lwjgl.org/download, select the options you need
and copy the build.gradle fragment you need to add.  Gradle will download the files automatically.

Note that in the Structs we need Struct.Pointer not jnr.ffi.Pointer because they are different. (Struct.Pointer.get() gives the jnr.ffi Pointer).
If you just write Pointer it will normally resolve to Struct.Pointer but maybe best to be explicit.

Tip: In Intellij install the plugin for CMD bat files. Then you can right click to execute a .bat file.

On laptop compileDawn.bat doesn't work:
g++ complains about not find entry point crc32_combine from cc1plus.exe
gcc runs fine, but g++ cannot even compile a simple helloworld.cpp

Reinstalled mingw-64 from here:
https://github.com/niXman/mingw-builds-binaries/releases
Version : wx86-64-....-win32-seh-ucrt....

Installed it in C:\Coding\mingw64 and added C:\Coding\mingw64\bin to the system environment variable PATH.
(Use env)

g++ --version  => 4.8.2

Make sure the run configuration of com.monstrous.Launcher is changed so that the working
directory points to src\main\c where the nativec.dll is located.



Warning: Disable Intel Vulkan adapter on Windows driver version 100.8729. See https://crbug.com/1338622.
 - While initializing adapter (backend=BackendType::Vulkan)
    at InitializeImpl (D:\a\webgpu-dawn-binaries\webgpu-dawn-binaries\build\_deps\dawn-src\src\dawn\native\vulkan\PhysicalDeviceVk.cpp:130)

Fixed by performing a graphics driver update.

Intel Driver & Support Assistant
Intel UHD Graphics 620
Driver
Version 27.20.100.8729
Date 2020-11-09
"Up to date" (Nov 2024).

Can be worked around for now by specifying a non-Vulkan backend when requesting the adapter:
	adapterOpts.backendType = WGPUBackendType_D3D12;

Download newer driver from:
https://www.intel.com/content/www/us/en/support/products/126789/graphics/processor-graphics/intel-uhd-graphics-family/intel-uhd-graphics-620.html
Download and run Intel Graphics driver installer
Version
31.0.101.2130
Date
2024-08-13


Warning: GetPreferredFormat is deprecated, use GetCapabilities().format[0] instead as the preferred format.

Note: since MSVC is installed this seems to be the preferred compiler by the Gradle plugin for cpp-application instead of MingW.


Get dawn.dll, dawn.lib and webgpu.h from here: https://github.com/jspanchu/webgpu-dawn-binaries
GLFW binaries from here: https://www.glfw.org/download, include glfw3dll.lib!

When using MSVC:
Note: to link a C++ app that relies on external DLLs (glfw3, webgpu) you need to download not only the DLL files but also the .LIB files.
The linker needs those .LIB files or else it will complain about 'error LNK2019: unresolved external symbol'
Make sure to use the .lib file that corresponds to the dll, e.g. the glfw3dll.lib of 6Kb not glfw3.lib of 200Kb which is a static library.


Running com.monstrous.Launcher:
The gradle run task doesn't work yet (cannot find nativec.dll)
But you can right click on the com.monstrous.Launcher class and select com.monstrous.Launcher.main(). The Intellij run configuration was updated with the working dir.

To do:
- improve gradle builds, modularize project
- generate more of the Java files, esp. the structs
- call dawn.dll directly without nativec.dll (could remain as a debug option?)
- add comfort layer on top of 1 to 1 translation of Webgpu API
- elaborate on 3d, etc.
- emulate SpriteBatch, Mesh, Bitmapfont, scene2d
- reduce duplication of binary files


Exercise: replacing each handcrafted class file one by one with generated files and check nothing breaks....
Some issues:


1. public class WGPUSurfaceConfiguration extends WgpuJavaStruct {
    private final DynamicStructRef<WGPUTextureFormat> viewFormats = new DynamicStructRef<>(WGPUTextureFormat.class);
    this is pointer to enum not pointer to struct should be Pointer

        private final Struct.Unsigned32 usage = new Struct.Unsigned32();
        should be enum WGPUTextureUsageFlags

        In the webgpu.h (dawn) there are typedef for each flag enum to give a uint32 as alternative:

        typedef enum WGPUColorWriteMask {
            WGPUColorWriteMask_None = 0x00000000,
            WGPUColorWriteMask_Red = 0x00000001,
            WGPUColorWriteMask_Green = 0x00000002,
            //.....
        } WGPUColorWriteMask WGPU_ENUM_ATTRIBUTE;
        typedef WGPUFlags WGPUColorWriteMaskFlags WGPU_ENUM_ATTRIBUTE;

        If a struct refers to WGPUColorWriteMaskFlags instead of WGPUColorWriteMask you get a uint as type

        E.g. in WGPUSurfaceConfiguration.usage

        Dirty fix: Alias WGPUColorWriteMaskFlags to WGPUColorWriteMask : DONE


2.        public class WGPUDeviceDescriptor extends WgpuJavaStruct {

            private final DynamicStructRef<WGPUFeatureName> requiredFeatures = new DynamicStructRef<>(WGPUFeatureName.class);
         WGPUFeatureName is a enum with gaps

         typedef struct WGPUDeviceDescriptor {
             WGPUChainedStruct const * nextInChain;
             WGPU_NULLABLE char const * label;
             size_t requiredFeatureCount;
             WGPUFeatureName const * requiredFeatures;
             WGPU_NULLABLE WGPURequiredLimits const * requiredLimits;

             It is in fact a pointer to an array of enum values (32 bit).
             requiredLimits is similar

             We can use Pointer, but need to think on how to build an array of enums
             todo


3.   Structs that are chained to should be subclassed from    WGPUChainedStruct instead of WgpuJavaStruct
  to allow         shaderDesc.setNextInChain(shaderCodeDesc);

        public class WGPUShaderModuleWGSLDescriptor extends WGPUChainedStruct - but this gives all sorts of problems

        Or use: shaderDesc.getNextInChain().set(shaderCodeDesc.getPointerTo());


4. Sometimes (1 in 2 runs) the demo crashes. FIXED
    Seems to be in RequestAdapterSync() in the call to wgpuInstanceRequestAdapter
    If backend is set to Null, then the following is selected.
    Back end: D3D12
    Description: D3D12 driver version 32.0.15.6094

    The crash is prevented by setting backend to D3D12 or Vulkan, i.e. not Undefined.

Status of triangle module:

This is a simple webgpu app in C++ using the Dawn backend and GLFW3.
It helps to test the C++ compiler is working and that WebGPU is working
on your machine.

- use Gradle command  'other\runDebug' to build and run the app.
- starts app, shows triangle but crashes after a few seconds.
- use Gradle command `build\clean` to clean up.



Troubleshooting:

DLL Link error on startup:

    Exception in thread "main" java.lang.UnsatisfiedLinkError: unknown
    Library names
    [nativec]

1. Make sure nativec.dll is compiled and present in src/main/c (run compileDawn.bat) (to do: do by gradle task instead)
2. Run com.monstrous.Launcher from the project window by right-click, Run com.monstrous.Launcher:com.monstrous.Launcher()
3. Make sure the config of com.monstrous.Launcher has working directory: C:\Coding\IdeaProjects\CallingWebGPU\libGPU\src\main\c

Or Gradle task libGPU/application/run


3/11:
Added module wrapper to compile the C++ code for wrapper.dll.

Run wrapper/build to create wrapper.dll in root/lib



Note: WGPUSurfaceConfiguration has a pointer to a list of enums.

    typedef struct WGPUSurfaceConfiguration {
        WGPUChainedStruct const * nextInChain;
        WGPUDevice device;
        WGPUTextureFormat format;
        WGPUTextureUsageFlags usage;
        size_t viewFormatCount;
        WGPUTextureFormat const * viewFormats;
        WGPUCompositeAlphaMode alphaMode;
        uint32_t width;
        uint32_t height;
        WGPUPresentMode presentMode;
    } WGPUSurfaceConfiguration WGPU_STRUCTURE_ATTRIB


5. Orring flags is clumsy with Java enums:
        bufferDesc.setUsage( WGPUBufferUsage.CopyDst.intValue() + WGPUBufferUsage.CopySrc.intValue() );
    type had to be changed to an integer to allow combined enum values




Image loading
- We use stb_image.h for image loading. Also used by LibGDX. Supports png, gif, jpg, etc.
note: we ignore format conversions for now. Also, not all stb formats seem to be supported by webgpu, e.g. RGBA4444

11/11:
- It seems the mip-mapping introduces some artifacts, e.g. red and green spots.
Fixed. Was due to byte overflow and Java having signed bytes



OBJ parsing: note that faces can have more



23/11:
Note that ToyCar has a normal map but no TANGENT attribute.  It does have materials with normalTexture.
In fact it has 3 materials and 2 have normal maps.

24/11:
todo texture scaling, noticable in toycar cloth

can we pass multiple lights in the frame uniform buffer?
yes: https://eliemichel.github.io/LearnWebGPU/basic-3d-rendering/some-interaction/lighting-control.html


