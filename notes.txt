
Note we use the webgpu.h header file from the Learn Webgpu in C++ web site. It is not the latest header file.



Get glfw3.dll from here for Windows 64

https://www.glfw.org/download


Command line:
g++ -m64 main.cpp -I.\include -Wl,--kill-at wgpu_native.dll glfw3.dll

Note: use wgpu_native.dll not -Lwgpu_native on the command line


F:\Coding\IdeaProjects\CallingWebGPU\src\main\c>g++ -m64 main.cpp -I.\include -Wl,--kill-at wgpu_native.dll glfw3.dll
F:/Coding/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/14.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\Users\Marco\AppData\Local\Temp\ccpRpXPB.o:main.cpp:(.text+0x466): undefined reference to `glfwGetWGPUSurface'
F:/Coding/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/14.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\Users\Marco\AppData\Local\Temp\ccpRpXPB.o:main.cpp:(.text+0x4d0): undefined reference to `requestAdapterSync(WGPUInstanceImpl*, WGPURequestAdapterOptions const*)'
F:/Coding/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/14.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\Users\Marco\AppData\Local\Temp\ccpRpXPB.o:main.cpp:(.text+0x5ca): undefined reference to `requestDeviceSync(WGPUAdapterImpl*, WGPUDeviceDescriptor const*)'
collect2.exe: error: ld returned 1 exit status


F:\Coding\IdeaProjects\CallingWebGPU\src\main\c>g++ -m64 main.cpp webgpu-utils.cpp -I.\include -Wl,--kill-at wgpu_native.dll glfw3.dll
F:/Coding/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/14.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\Users\Marco\AppData\Local\Temp\cc0qfLb0.o:main.cpp:(.text+0x466): undefined reference to `glfwGetWGPUSurface'
collect2.exe: error: ld returned 1 exit status

Add glfw3webgpu.c and glfw3webgpu.h to the source directory (from https://eliemichel.github.io/LearnWebGPU/getting-started/hello-webgpu.html)

g++ -m64 main.cpp webgpu-utils.cpp glfw3webgpu.c -I.\include -Wl,--kill-at wgpu_native.dll glfw3.dll


Batch file compile_triangle.bat is to generate a triangle demo from C files linking to DLLs using Mingw.

This also works (no kill-at):
g++ triangle.cpp webgpu-utils.cpp glfw3webgpu.c -I.\include wgpu_native.dll glfw3.dll -o triangle.exe

Note the dll need to be found by the executable so we put them in the same directory at the executable.


Now to call from Java.
To make sure the Java programme can find the native.dll set the working directory to the once containing the DLLs.

So we can call DLL functions from Java, but now we need to pass descriptor structs to the DLL.
A Java class will not have the same memory layout, we need to pass a pointer to memory that follows precisely the struct as defined in C.

One solution may be JNR-FFI (foreign function interface) which allows conversion between Java and C parameters and supports structs in memory.

Need to up my Gradle skills to link JNR-FFI with my Java code.



Side note:
The notation R"( .... )"; in the cpp code to define shader code is a so-called raw string
introduced in C++11.

You can check for C++11 support like this:

#if __cplusplus < 201103L
  #error This library needs at least a C++11 compliant compiler
#endif

> g++ --version
g++.exe (x86_64-win32-seh, Built by MinGW-W64 project) 4.8.2

Need to call with a flag like this:
g++ -std=c++11 triangle.cpp -I.\include

triangle.exe hangs on laptop.
It hangs in the call of wgpuCreateInstance().


To compile LeanrnWebGPU C code with MinGW:
> delete build directory
> cmake -G "MinGW Makefiles" . -B build
> cmake --build build

Errors:
  WGPURequestAdapterOptions adapterOpts = {};                                           ^
C:\Coding\C\LearnWebGPU-Code-step030-vanilla\main.cpp:106:43: error: missing initializer for member 'WGPURequestAdapterO


The mingw compiler is very old. Replaced it by downloading MSYS2 and adding
C:\Coding\msys64\ucrt64\bin to the PATH
> gcc --version
gcc (Rev3, Built by MSYS2 project) 14.1.0
Copyright (C) 2024 Free Software Foundation, Inc.

Download gcc using: pacman -S mingw-w64-ucrt-x86_64-gcc

Also download pacman -S mingw-w64-ucrt-x86_64-cmake


To do: make gradle script to compile the C source instead of calling compile.bat manually.