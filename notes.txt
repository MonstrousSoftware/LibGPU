
Note we use the webgpu.h header file from the Learn Webgpu in C++ web site. It is not the latest header file.



Get glfw3.dll from here for Windows 64

https://www.glfw.org/download


Command line:
g++ -m64 main.cpp -I.\include -Wl,--kill-at wgpu_native.dll glfw3.dll

Note: use wgpu_native.dll not -Lwgpu_native on the command line


F:\Coding\IdeaProjects\CallingWebGPU\src\main\c>g++ -m64 main.cpp -I.\include -Wl,--kill-at wgpu_native.dll glfw3.dll
F:/Coding/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/14.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\Users\Marco\AppData\Local\Temp\ccpRpXPB.o:main.cpp:(.text+0x466): undefined reference to `glfwGetWGPUSurface'
F:/Coding/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/14.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\Users\Marco\AppData\Local\Temp\ccpRpXPB.o:main.cpp:(.text+0x4d0): undefined reference to `requestAdapterSync(WGPUInstanceImpl*, WGPURequestAdapterOptions const*)'
F:/Coding/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/14.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\Users\Marco\AppData\Local\Temp\ccpRpXPB.o:main.cpp:(.text+0x5ca): undefined reference to `requestDeviceSync(WGPUAdapterImpl*, WGPUDeviceDescriptor const*)'
collect2.exe: error: ld returned 1 exit status


F:\Coding\IdeaProjects\CallingWebGPU\src\main\c>g++ -m64 main.cpp webgpu-utils.cpp -I.\include -Wl,--kill-at wgpu_native.dll glfw3.dll
F:/Coding/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/14.2.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\Users\Marco\AppData\Local\Temp\cc0qfLb0.o:main.cpp:(.text+0x466): undefined reference to `glfwGetWGPUSurface'
collect2.exe: error: ld returned 1 exit status

Add glfw3webgpu.c and glfw3webgpu.h to the source directory (from https://eliemichel.github.io/LearnWebGPU/getting-started/hello-webgpu.html)

g++ -m64 main.cpp webgpu-utils.cpp glfw3webgpu.c -I.\include -Wl,--kill-at wgpu_native.dll glfw3.dll


Batch file compile_triangle.bat is to generate a triangle demo from C files linking to DLLs using Mingw.

This also works (no kill-at):
g++ triangle.cpp webgpu-utils.cpp glfw3webgpu.c -I.\include wgpu_native.dll glfw3.dll -o triangle.exe

Note the dll need to be found by the executable so we put them in the same directory at the executable.


Now to call from Java.
To make sure the Java programme can find the native.dll set the working directory to the once containing the DLLs:
In Intellij: Edit Configuration, set Working Directory to F:\Coding\IdeaProjects\CallingWebGPU\src\main\c

So we can call DLL functions from Java, but now we need to pass descriptor structs to the DLL.
A Java class will not have the same memory layout, we need to pass a pointer to memory that follows precisely the struct as defined in C.

One solution may be JNR-FFI (foreign function interface) which allows conversion between Java and C parameters and supports structs in memory.

Need to up my Gradle skills to link JNR-FFI with my Java code.



Side note:
The notation R"( .... )"; in the cpp code to define shader code is a so-called raw string
introduced in C++11.

You can check for C++11 support like this:

#if __cplusplus < 201103L
  #error This library needs at least a C++11 compliant compiler
#endif

> g++ --version
g++.exe (x86_64-win32-seh, Built by MinGW-W64 project) 4.8.2

Need to call with a flag like this:
g++ -std=c++11 triangle.cpp -I.\include

triangle.exe hangs on laptop.
It hangs in the call of wgpuCreateInstance().


To compile LeanrnWebGPU C code with MinGW:
> delete build directory
> cmake -G "MinGW Makefiles" . -B build
> cmake --build build

Errors:
  WGPURequestAdapterOptions adapterOpts = {};                                           ^
C:\Coding\C\LearnWebGPU-Code-step030-vanilla\main.cpp:106:43: error: missing initializer for member 'WGPURequestAdapterO


The mingw compiler is very old. Replaced it by downloading MSYS2 and adding
C:\Coding\msys64\ucrt64\bin to the PATH
> gcc --version
gcc (Rev3, Built by MSYS2 project) 14.1.0
Copyright (C) 2024 Free Software Foundation, Inc.

Download gcc using: pacman -S mingw-w64-ucrt-x86_64-gcc

Also download pacman -S mingw-w64-ucrt-x86_64-cmake


To do: make gradle script to compile the C source instead of calling compile.bat manually.

Can we impose some typing on the various Pointer variables (device, adapter, queue, etc.)

To do: add GLFW to create a window


To add LWJGL3 to your Java project you can just go to the customizer on https://www.lwjgl.org/download, select the options you need
and copy the build.gradle fragment you need to add.  Gradle will download the files automatically.

Note that in the Structs we need Struct.Pointer not jnr.ffi.Pointer because they are different. (Struct.Pointer.get() gives the jnr.ffi Pointer).
If you just write Pointer it will normally resolve to Struct.Pointer but maybe best to be explicit.

Tip: In Intellij install the plugin for CMD bat files. Then you can right click to execute a .bat file.

On laptop compileDawn.bat doesn't work:
g++ complains about not find entry point crc32_combine from cc1plus.exe
gcc runs fine, but g++ cannot even compile a simple helloworld.cpp

Reinstalled mingw-64 from here:
https://github.com/niXman/mingw-builds-binaries/releases
Version : wx86-64-....-win32-seh-ucrt....

Installed it in C:\Coding\mingw64 and added C:\Coding\mingw64\bin to the system environment variable PATH.
(Use env)

g++ --version  => 4.8.2

Make sure the run configuration of Main is changed so that the working
directory points to src\main\c where the nativec.dll is located.



Warning: Disable Intel Vulkan adapter on Windows driver version 100.8729. See https://crbug.com/1338622.
 - While initializing adapter (backend=BackendType::Vulkan)
    at InitializeImpl (D:\a\webgpu-dawn-binaries\webgpu-dawn-binaries\build\_deps\dawn-src\src\dawn\native\vulkan\PhysicalDeviceVk.cpp:130)

Fixed by performing a graphics driver update.



Warning: GetPreferredFormat is deprecated, use GetCapabilities().format[0] instead as the preferred format.

Note: since MSVC is installed this seems to be the preferred compiler by the Gradle plugin for cpp-application instead of MingW.


Get dawn.dll, dawn.lib and webgpu.h from here: https://github.com/jspanchu/webgpu-dawn-binaries
GLFW binaries from here: https://www.glfw.org/download, include glfw3dll.lib!

When using MSVC:
Note: to link a C++ app that relies on external DLLs (glfw3, webgpu) you need to download not only the DLL files but also the .LIB files.
The linker needs those .LIB files or else it will complain about 'error LNK2019: unresolved external symbol'
Make sure to use the .lib file that corresponds to the dll, e.g. the glfw3dll.lib of 6Kb not glfw3.lib of 200Kb which is a static library.


Running Main:
The gradle run task doesn't work yet (cannot find nativec.dll)
But you can right click on the Main class and select Main.main(). The Intellij run configuration was updated with the working dir.

To do:
- improve gradle builds, modularize project
- generate more of the Java files, esp. the structs
- call dawn.dll directly without nativec.dll (could remain as a debug option?)
- add comfort layer on top of 1 to 1 translation of Webgpu API
- elaborate on 3d, etc.
- emulate SpriteBatch, Mesh, Bitmapfont, scene2d
- reduce duplication of binary files