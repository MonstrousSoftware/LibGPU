plugins {
    id 'cpp-application'
}


// Set the target operating system and architecture for this application
application {
    targetMachines.add(machines.windows.x86_64)

}

tasks.withType(CppCompile).configureEach {

    // Define a compiler options
    // Define toolchain-specific compiler options
    compilerArgs.addAll toolChain.map { toolChain ->
        if (toolChain in [ Gcc, Clang ]) {
            return [ '/std:c++11']
        } else if (toolChain in VisualCpp) {
            return ['/PD',  '/Zc:__cplusplus'] //  /Zc:__cplusplus /c']
        }
        return []
    }
}

tasks.withType(LinkExecutable).configureEach {
    linkerArgs.add 'src/main/lib/*.lib'
}


task copyDLL(type: Copy) {
    from 'src/main/lib/'
    into 'build/install/main/debug/lib'
    include '*.dll'
    outputs.upToDateWhen { false }
}

tasks.register('runDebug') {
    dependsOn build  // build executable if it does not exist
    dependsOn copyDLL
    doLast {
        exec {
            executable = 'build/install/main/debug/lib/triangle.exe'
            setIgnoreExitValue(true)
        }
    }
}
