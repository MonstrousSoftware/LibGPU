package com.monstrous.wgpu;

import com.monstrous.wgpuUtils.WgpuJava;
import com.monstrous.wgpuUtils.WgpuJavaStruct;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPURequestAdapterOptions extends WgpuJavaStruct {

    private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
    private final Struct.Pointer compatibleSurface = new Struct.Pointer();
    private final Struct.Enum<WGPUPowerPreference> powerPreference = new Struct.Enum<>(WGPUPowerPreference.class);
    private final Struct.Enum<WGPUBackendType> backendType = new Struct.Enum<>(WGPUBackendType.class);
    private final Struct.Unsigned32 forceFallbackAdapter = new Struct.Unsigned32();
    private final Struct.Unsigned32 compatibilityMode = new Struct.Unsigned32();

    private WGPURequestAdapterOptions(){}

    @Deprecated
    public WGPURequestAdapterOptions(Runtime runtime){
        super(runtime);
    }

    /**
     * Creates this struct on the java heap.
     * In general, this should <b>not</b> be used because these structs
     * cannot be directly passed into native code.
     */
    public static WGPURequestAdapterOptions createHeap(){
        return new WGPURequestAdapterOptions();
    }

    /**
     * Creates this struct in direct memory.
     * This is how most structs should be created (unless, they
     * are members of a nothing struct)
     *
     * @see WgpuJavaStruct#useDirectMemory
     */
    public static WGPURequestAdapterOptions createDirect(){
        var struct = new WGPURequestAdapterOptions();
        struct.useDirectMemory();
        return struct;
    }


    public DynamicStructRef<WGPUChainedStruct> getNextInChain(){
        return nextInChain;
    }

    public void setNextInChain(WGPUChainedStruct... x){
        if(x.length == 0 || x[0] == null){
            this.nextInChain.set(WgpuJava.createNullPointer());
        } else {
            this.nextInChain.set(x);
        }
    }

    public jnr.ffi.Pointer getCompatibleSurface(){
        return compatibleSurface.get();
    }

    public void setCompatibleSurface(jnr.ffi.Pointer x){
        this.compatibleSurface.set(x);
    }

    public WGPUPowerPreference getPowerPreference(){
        return powerPreference.get();
    }

    public void setPowerPreference(WGPUPowerPreference x){
        this.powerPreference.set(x);
    }

    public WGPUBackendType getBackendType(){
        return backendType.get();
    }

    public void setBackendType(WGPUBackendType x){
        this.backendType.set(x);
    }

    public long getForceFallbackAdapter(){
        return forceFallbackAdapter.get();
    }

    public void setForceFallbackAdapter(long x){
        this.forceFallbackAdapter.set(x);
    }

    public long getCompatibilityMode(){
        return compatibilityMode.get();
    }

    public void setCompatibilityMode(long x){
        this.compatibilityMode.set(x);
    }

}