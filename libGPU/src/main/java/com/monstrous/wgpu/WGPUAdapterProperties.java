package com.monstrous.wgpu;

import com.monstrous.wgpuUtilsOLD.CStrPointer;
import com.monstrous.wgpuUtilsOLD.RustCString;
import com.monstrous.wgpuUtilsOLD.WgpuJava;
import com.monstrous.wgpuUtilsOLD.WgpuJavaStruct;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUAdapterProperties extends WgpuJavaStruct {

    private final DynamicStructRef<WGPUChainedStructOut> nextInChain = new DynamicStructRef<>(WGPUChainedStructOut.class);
    private final Struct.Unsigned32 vendorID = new Struct.Unsigned32();
    private final @CStrPointer Struct.Pointer vendorName = new Struct.Pointer();
    private final @CStrPointer Struct.Pointer architecture = new Struct.Pointer();
    private final Struct.Unsigned32 deviceID = new Struct.Unsigned32();
    private final @CStrPointer Struct.Pointer name = new Struct.Pointer();
    private final @CStrPointer Struct.Pointer driverDescription = new Struct.Pointer();
    private final Struct.Enum<WGPUAdapterType> adapterType = new Struct.Enum<>(WGPUAdapterType.class);
    private final Struct.Enum<WGPUBackendType> backendType = new Struct.Enum<>(WGPUBackendType.class);
    private final Struct.Unsigned32 compatibilityMode = new Struct.Unsigned32();

    private WGPUAdapterProperties(){}

    @Deprecated
    public WGPUAdapterProperties(Runtime runtime){
        super(runtime);
    }

    /**
     * Creates this struct on the java heap.
     * In general, this should <b>not</b> be used because these structs
     * cannot be directly passed into native code.
     */
    public static WGPUAdapterProperties createHeap(){
        return new WGPUAdapterProperties();
    }

    /**
     * Creates this struct in direct memory.
     * This is how most structs should be created (unless, they
     * are members of a nothing struct)
     *
     * @see WgpuJavaStruct#useDirectMemory
     */
    public static WGPUAdapterProperties createDirect(){
        var struct = new WGPUAdapterProperties();
        struct.useDirectMemory();
        return struct;
    }


    public DynamicStructRef<WGPUChainedStructOut> getNextInChain(){
        return nextInChain;
    }

    public void setNextInChain(WGPUChainedStructOut... x){
        if(x.length == 0 || x[0] == null){
            this.nextInChain.set(WgpuJava.createNullPointer());
        } else {
            this.nextInChain.set(x);
        }
    }

    public long getVendorID(){
        return vendorID.get();
    }

    public void setVendorID(long x){
        this.vendorID.set(x);
    }

    public java.lang.String getVendorName(){
        return RustCString.fromPointer(vendorName.get());
    }

    public void setVendorName(java.lang.String x){
        this.vendorName.set(RustCString.toPointer(x));
    }

    public java.lang.String getArchitecture(){
        return RustCString.fromPointer(architecture.get());
    }

    public void setArchitecture(java.lang.String x){
        this.architecture.set(RustCString.toPointer(x));
    }

    public long getDeviceID(){
        return deviceID.get();
    }

    public void setDeviceID(long x){
        this.deviceID.set(x);
    }

    public java.lang.String getName(){
        return RustCString.fromPointer(name.get());
    }

    public void setName(java.lang.String x){
        this.name.set(RustCString.toPointer(x));
    }

    public java.lang.String getDriverDescription(){
        return RustCString.fromPointer(driverDescription.get());
    }

    public void setDriverDescription(java.lang.String x){
        this.driverDescription.set(RustCString.toPointer(x));
    }

    public WGPUAdapterType getAdapterType(){
        return adapterType.get();
    }

    public void setAdapterType(WGPUAdapterType x){
        this.adapterType.set(x);
    }

    public WGPUBackendType getBackendType(){
        return backendType.get();
    }

    public void setBackendType(WGPUBackendType x){
        this.backendType.set(x);
    }

    public long getCompatibilityMode(){
        return compatibilityMode.get();
    }

    public void setCompatibilityMode(long x){
        this.compatibilityMode.set(x);
    }

}