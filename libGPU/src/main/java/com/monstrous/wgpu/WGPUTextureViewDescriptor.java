package com.monstrous.wgpu;

import com.monstrous.wgpuUtils.WgpuJava;
import com.monstrous.wgpuUtils.CStrPointer;
import com.monstrous.wgpuUtils.WgpuJavaStruct;
import com.monstrous.wgpuUtils.RustCString;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUTextureViewDescriptor extends WgpuJavaStruct {

    private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
    private final @CStrPointer Struct.Pointer label = new Struct.Pointer();
    private final Struct.Enum<WGPUTextureFormat> format = new Struct.Enum<>(WGPUTextureFormat.class);
    private final Struct.Enum<WGPUTextureViewDimension> dimension = new Struct.Enum<>(WGPUTextureViewDimension.class);
    private final Struct.Unsigned32 baseMipLevel = new Struct.Unsigned32();
    private final Struct.Unsigned32 mipLevelCount = new Struct.Unsigned32();
    private final Struct.Unsigned32 baseArrayLayer = new Struct.Unsigned32();
    private final Struct.Unsigned32 arrayLayerCount = new Struct.Unsigned32();
    private final Struct.Enum<WGPUTextureAspect> aspect = new Struct.Enum<>(WGPUTextureAspect.class);

    private WGPUTextureViewDescriptor(){}

    @Deprecated
    public WGPUTextureViewDescriptor(Runtime runtime){
        super(runtime);
    }

    /**
     * Creates this struct on the java heap.
     * In general, this should <b>not</b> be used because these structs
     * cannot be directly passed into native code.
     */
    public static WGPUTextureViewDescriptor createHeap(){
        return new WGPUTextureViewDescriptor();
    }

    /**
     * Creates this struct in direct memory.
     * This is how most structs should be created (unless, they
     * are members of a nothing struct)
     *
     * @see WgpuJavaStruct#useDirectMemory
     */
    public static WGPUTextureViewDescriptor createDirect(){
        var struct = new WGPUTextureViewDescriptor();
        struct.useDirectMemory();
        return struct;
    }


    public DynamicStructRef<WGPUChainedStruct> getNextInChain(){
        return nextInChain;
    }

    public void setNextInChain(WGPUChainedStruct... x){
        if(x.length == 0 || x[0] == null){
            this.nextInChain.set(WgpuJava.createNullPointer());
        } else {
            this.nextInChain.set(x);
        }
    }

    public java.lang.String getLabel(){
        return RustCString.fromPointer(label.get());
    }

    public void setLabel(java.lang.String x){
        this.label.set(RustCString.toPointer(x));
    }

    public WGPUTextureFormat getFormat(){
        return format.get();
    }

    public void setFormat(WGPUTextureFormat x){
        this.format.set(x);
    }

    public WGPUTextureViewDimension getDimension(){
        return dimension.get();
    }

    public void setDimension(WGPUTextureViewDimension x){
        this.dimension.set(x);
    }

    public long getBaseMipLevel(){
        return baseMipLevel.get();
    }

    public void setBaseMipLevel(long x){
        this.baseMipLevel.set(x);
    }

    public long getMipLevelCount(){
        return mipLevelCount.get();
    }

    public void setMipLevelCount(long x){
        this.mipLevelCount.set(x);
    }

    public long getBaseArrayLayer(){
        return baseArrayLayer.get();
    }

    public void setBaseArrayLayer(long x){
        this.baseArrayLayer.set(x);
    }

    public long getArrayLayerCount(){
        return arrayLayerCount.get();
    }

    public void setArrayLayerCount(long x){
        this.arrayLayerCount.set(x);
    }

    public WGPUTextureAspect getAspect(){
        return aspect.get();
    }

    public void setAspect(WGPUTextureAspect x){
        this.aspect.set(x);
    }

}