package com.monstrous.wgpu;

import com.monstrous.wgpuUtils.WgpuJava;
import com.monstrous.wgpuUtils.CStrPointer;
import com.monstrous.wgpuUtils.WgpuJavaStruct;
import com.monstrous.wgpuUtils.RustCString;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPURenderPassDescriptor extends WgpuJavaStruct {

    private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
    private final @CStrPointer Struct.Pointer label = new Struct.Pointer();
    private final Struct.size_t colorAttachmentCount = new Struct.size_t();
    private final DynamicStructRef<WGPURenderPassColorAttachment> colorAttachments = new DynamicStructRef<>(WGPURenderPassColorAttachment.class);
    private final DynamicStructRef<WGPURenderPassDepthStencilAttachment> depthStencilAttachment = new DynamicStructRef<>(WGPURenderPassDepthStencilAttachment.class);
    private final Struct.Pointer occlusionQuerySet = new Struct.Pointer();
    private final DynamicStructRef<WGPURenderPassTimestampWrites> timestampWrites = new DynamicStructRef<>(WGPURenderPassTimestampWrites.class);

    private WGPURenderPassDescriptor(){}

    @Deprecated
    public WGPURenderPassDescriptor(Runtime runtime){
        super(runtime);
    }

    /**
     * Creates this struct on the java heap.
     * In general, this should <b>not</b> be used because these structs
     * cannot be directly passed into native code.
     */
    public static WGPURenderPassDescriptor createHeap(){
        return new WGPURenderPassDescriptor();
    }

    /**
     * Creates this struct in direct memory.
     * This is how most structs should be created (unless, they
     * are members of a nothing struct)
     *
     * @see WgpuJavaStruct#useDirectMemory
     */
    public static WGPURenderPassDescriptor createDirect(){
        var struct = new WGPURenderPassDescriptor();
        struct.useDirectMemory();
        return struct;
    }


    public DynamicStructRef<WGPUChainedStruct> getNextInChain(){
        return nextInChain;
    }

    public void setNextInChain(WGPUChainedStruct... x){
        if(x.length == 0 || x[0] == null){
            this.nextInChain.set(WgpuJava.createNullPointer());
        } else {
            this.nextInChain.set(x);
        }
    }

    public java.lang.String getLabel(){
        return RustCString.fromPointer(label.get());
    }

    public void setLabel(java.lang.String x){
        this.label.set(RustCString.toPointer(x));
    }

    public long getColorAttachmentCount(){
        return colorAttachmentCount.get();
    }

    public void setColorAttachmentCount(long x){
        this.colorAttachmentCount.set(x);
    }

    public DynamicStructRef<WGPURenderPassColorAttachment> getColorAttachments(){
        return colorAttachments;
    }

    public void setColorAttachments(WGPURenderPassColorAttachment... x){
        if(x.length == 0 || x[0] == null){
            this.colorAttachments.set(WgpuJava.createNullPointer());
        } else {
            this.colorAttachments.set(x);
        }
    }

    public DynamicStructRef<WGPURenderPassDepthStencilAttachment> getDepthStencilAttachment(){
        return depthStencilAttachment;
    }

    public void setDepthStencilAttachment(WGPURenderPassDepthStencilAttachment... x){
        if(x.length == 0 || x[0] == null){
            this.depthStencilAttachment.set(WgpuJava.createNullPointer());
        } else {
            this.depthStencilAttachment.set(x);
        }
    }

    public jnr.ffi.Pointer getOcclusionQuerySet(){
        return occlusionQuerySet.get();
    }

    public void setOcclusionQuerySet(jnr.ffi.Pointer x){
        this.occlusionQuerySet.set(x);
    }

    public DynamicStructRef<WGPURenderPassTimestampWrites> getTimestampWrites(){
        return timestampWrites;
    }

    public void setTimestampWrites(WGPURenderPassTimestampWrites... x){
        if(x.length == 0 || x[0] == null){
            this.timestampWrites.set(WgpuJava.createNullPointer());
        } else {
            this.timestampWrites.set(x);
        }
    }

}