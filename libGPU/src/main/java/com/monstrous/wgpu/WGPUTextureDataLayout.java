package com.monstrous.wgpu;

import com.monstrous.wgpuUtilsOLD.WgpuJava;
import com.monstrous.wgpuUtilsOLD.WgpuJavaStruct;
import jnr.ffi.Runtime;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUTextureDataLayout extends WgpuJavaStruct {

    private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
    private final Unsigned64 offset = new Unsigned64();
    private final Unsigned32 bytesPerRow = new Unsigned32();
    private final Unsigned32 rowsPerImage = new Unsigned32();

    private WGPUTextureDataLayout(){}

    @Deprecated
    public WGPUTextureDataLayout(Runtime runtime){
        super(runtime);
    }

	/**
	* Creates this struct on the java heap.
	* In general, this should <b>not</b> be used because these structs
	* cannot be directly passed into native code. 
	*/
    public static WGPUTextureDataLayout createHeap(){
        return new WGPUTextureDataLayout();
    }

	/**
	* Creates this struct in direct memory.
	* This is how most structs should be created (unless, they
	* are members of a nothing struct)
	* 
	* @see WgpuJavaStruct#useDirectMemory
	*/
    public static WGPUTextureDataLayout createDirect(){
        var struct = new WGPUTextureDataLayout();
        struct.useDirectMemory();
        return struct;
    }


    public DynamicStructRef<WGPUChainedStruct> getNextInChain(){
        return nextInChain;
    }

    public void setNextInChain(WGPUChainedStruct... x){
        if(x.length == 0 || x[0] == null){
            this.nextInChain.set(WgpuJava.createNullPointer());
        } else {
            this.nextInChain.set(x);
        }
    }

    public long getOffset(){
        return offset.get();
    }

    public void setOffset(long x){
        this.offset.set(x);
    }

    public long getBytesPerRow(){
        return bytesPerRow.get();
    }

    public void setBytesPerRow(long x){
        this.bytesPerRow.set(x);
    }

    public long getRowsPerImage(){
        return rowsPerImage.get();
    }

    public void setRowsPerImage(long x){
        this.rowsPerImage.set(x);
    }

}