package com.monstrous.wgpu;

import com.monstrous.wgpuUtilsOLD.WgpuJava;
import com.monstrous.wgpuUtilsOLD.WgpuJavaStruct;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUUncapturedErrorCallbackInfo extends WgpuJavaStruct {

    private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
    private final Struct.Pointer callback = new Struct.Pointer();
    private final Struct.Pointer userdata = new Struct.Pointer();

    private WGPUUncapturedErrorCallbackInfo(){}

    @Deprecated
    public WGPUUncapturedErrorCallbackInfo(Runtime runtime){
        super(runtime);
    }

    /**
     * Creates this struct on the java heap.
     * In general, this should <b>not</b> be used because these structs
     * cannot be directly passed into native code.
     */
    public static WGPUUncapturedErrorCallbackInfo createHeap(){
        return new WGPUUncapturedErrorCallbackInfo();
    }

    /**
     * Creates this struct in direct memory.
     * This is how most structs should be created (unless, they
     * are members of a nothing struct)
     *
     * @see WgpuJavaStruct#useDirectMemory
     */
    public static WGPUUncapturedErrorCallbackInfo createDirect(){
        var struct = new WGPUUncapturedErrorCallbackInfo();
        struct.useDirectMemory();
        return struct;
    }


    public DynamicStructRef<WGPUChainedStruct> getNextInChain(){
        return nextInChain;
    }

    public void setNextInChain(WGPUChainedStruct... x){
        if(x.length == 0 || x[0] == null){
            this.nextInChain.set(WgpuJava.createNullPointer());
        } else {
            this.nextInChain.set(x);
        }
    }

    public jnr.ffi.Pointer getCallback(){
        return callback.get();
    }

    public void setCallback(jnr.ffi.Pointer x){
        this.callback.set(x);
    }

    public jnr.ffi.Pointer getUserdata(){
        return userdata.get();
    }

    public void setUserdata(jnr.ffi.Pointer x){
        this.userdata.set(x);
    }

}