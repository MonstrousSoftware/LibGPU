package com.monstrous.wgpu;

import com.monstrous.utils.CStrPointer;
import com.monstrous.utils.RustCString;
import com.monstrous.utils.WgpuJava;
import com.monstrous.utils.WgpuJavaStruct;
import jnr.ffi.Runtime;
import jnr.ffi.Struct;

/** NOTE: THIS FILE WAS PRE-GENERATED BY JNR_GEN! */
public class WGPUDeviceDescriptor extends WgpuJavaStruct {

    private final DynamicStructRef<WGPUChainedStruct> nextInChain = new DynamicStructRef<>(WGPUChainedStruct.class);
    private final @CStrPointer Struct.Pointer label = new Struct.Pointer();
    private final Struct.size_t requiredFeatureCount = new Struct.size_t();
    private final Pointer requiredFeatures = new Pointer();
    private final Pointer requiredLimits = new Pointer();
    private final WGPUQueueDescriptor defaultQueue = inner(WGPUQueueDescriptor.createHeap());
    private final Struct.Pointer deviceLostCallback = new Struct.Pointer();
    private final Struct.Pointer deviceLostUserdata = new Struct.Pointer();
    private final WGPUDeviceLostCallbackInfo deviceLostCallbackInfo = inner(WGPUDeviceLostCallbackInfo.createHeap());
    private final WGPUUncapturedErrorCallbackInfo uncapturedErrorCallbackInfo = inner(WGPUUncapturedErrorCallbackInfo.createHeap());

    private WGPUDeviceDescriptor(){}

    @Deprecated
    public WGPUDeviceDescriptor(Runtime runtime){
        super(runtime);
    }

    /**
     * Creates this struct on the java heap.
     * In general, this should <b>not</b> be used because these structs
     * cannot be directly passed into native code.
     */
    public static WGPUDeviceDescriptor createHeap(){
        return new WGPUDeviceDescriptor();
    }

    /**
     * Creates this struct in direct memory.
     * This is how most structs should be created (unless, they
     * are members of a nothing struct)
     *
     * @see WgpuJavaStruct#useDirectMemory
     */
    public static WGPUDeviceDescriptor createDirect(){
        var struct = new WGPUDeviceDescriptor();
        struct.useDirectMemory();
        return struct;
    }


    public DynamicStructRef<WGPUChainedStruct> getNextInChain(){
        return nextInChain;
    }

    public void setNextInChain(WGPUChainedStruct... x){
        if(x.length == 0 || x[0] == null){
            this.nextInChain.set(WgpuJava.createNullPointer());
        } else {
            this.nextInChain.set(x);
        }
    }

    public java.lang.String getLabel(){
        return RustCString.fromPointer(label.get());
    }

    public void setLabel(java.lang.String x){
        this.label.set(RustCString.toPointer(x));
    }

    public long getRequiredFeatureCount(){
        return requiredFeatureCount.get();
    }

    public void setRequiredFeatureCount(long x){
        this.requiredFeatureCount.set(x);
    }

    public Pointer getRequiredFeatures(){
        return requiredFeatures;
    }

    public void setRequiredFeatures(WGPUFeatureName... x){
//        if(x.length == 0 || x[0] == null){
            this.requiredFeatures.set(WgpuJava.createNullPointer());
//        } else {
//            this.requiredFeatures.set(x);
//        }
    }

    public Pointer getRequiredLimits(){
        return requiredLimits;
    }

    public void setRequiredLimits(WGPURequiredLimits... x){
//        if(x.length == 0 || x[0] == null){
            this.requiredLimits.set(WgpuJava.createNullPointer());
//        } else {
//            this.requiredLimits.set(x);
//        }
    }

    public WGPUQueueDescriptor getDefaultQueue(){
        return defaultQueue;
    }

    public jnr.ffi.Pointer getDeviceLostCallback(){
        return deviceLostCallback.get();
    }

    public void setDeviceLostCallback(jnr.ffi.Pointer x){
        this.deviceLostCallback.set(x);
    }

    public jnr.ffi.Pointer getDeviceLostUserdata(){
        return deviceLostUserdata.get();
    }

    public void setDeviceLostUserdata(jnr.ffi.Pointer x){
        this.deviceLostUserdata.set(x);
    }

    public WGPUDeviceLostCallbackInfo getDeviceLostCallbackInfo(){
        return deviceLostCallbackInfo;
    }

    public WGPUUncapturedErrorCallbackInfo getUncapturedErrorCallbackInfo(){
        return uncapturedErrorCallbackInfo;
    }

}